#### RSA - Medium

*Can you help decrypt the message?*
</br>

```
c: 207557546560859169576945127953007210120874560172495774733332113176052380374259008176000473940275124997746175571544779705475479684555026646029009
e: 65537
n: 398777541563043737059353117039052367438379031798809882266113550550889422915327876451213155884493233655798282644321599384995454457054595596193529
```

</br>

There was a similar task last semester. This time the title already reveals that it is an RSA challenge. Since n is a relatively small number, we have a good chance of finding its two prime factors.
[FactorDB](http://factordb.com/index.php?id=1100000003935143215) has the factors which are q = 9058385098643201 and p = 44023028080664636076928415706635475780415467068429427621606805998837244807327108600025160059258108909394857318936421945725300729.
We know n, e, q and p which can be used to decrypt the message.
Let's take a closer look at how RSA works.

**Key Generation:**
1. Select  p,q (prime numbers and p!=q)
2. Calculate n = p * q
3. Calculate phi(n) = ( p - 1 ) * ( q - 1 )
4. Select integer e       GCD ( ϕ(n) , e ) = 1; 1 < e < ϕ(n)
5. Calculate d = inverse(e) % ϕ(n)
6. Public Key {e,n}
7. Private Key {d,n}

**Encryption:** C = pow( M , e) % n

**Decryption:**  M = pow(C , d) % n

**Python script:**
```
from Crypto.Util.number import *

q = 9058385098643201
p = 44023028080664636076928415706635475780415467068429427621606805998837244807327108600025160059258108909394857318936421945725300729
n = 398777541563043737059353117039052367438379031798809882266113550550889422915327876451213155884493233655798282644321599384995454457054595596193529
c = 207557546560859169576945127953007210120874560172495774733332113176052380374259008176000473940275124997746175571544779705475479684555026646029009
e = 65537

# decrypt
d = inverse(e,(p-1)*(q-1))
m = pow(c,d,p*q)
print("Message: ", long_to_bytes(m))
```

The flag is ```nland{7h15_15_f1n3}```.
