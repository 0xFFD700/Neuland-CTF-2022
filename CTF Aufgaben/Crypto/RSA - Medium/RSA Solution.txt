#### Baby - Easy
 </br>
*Can you read my secret message?*
 </br>
```
c: 3659175445595891578224956514800577143470123959736033284753586380604765644888785047353234225884268524868130423207412760208709937645278097199257596718082197770232653
e: 65537
n: 7234982060278593612743772588544839368196822773938312383630097619428475995024256036322651540252528422237410644498393424811350166970040550612292749721636427996110217
```
 </br>

Our problem looks like RSA, since n is a relatively small number, we have a good chance of finding its two prime factors.
[FactorDB](http://factordb.com/index.php) has the factors which are q = 881232631 and p = 8210070537297879080403427081611143117323832705348733714367072296291847135452087039571565229808799967414518771375811008536462339613523174917807542832167807.
We know n, e, q and p which can be used to decrypt the message.
Let's take a closer look at how RSA works.

**Key Generation:**
1. Select  p,q (prime numbers and p!=q)
2. Calculate n = p * q
3. Calculate phi(ϕ) = ( p - 1 ) * ( q - 1 )
4. Select integer e       GCD ( ϕ(n) , e ) = 1; 1 < e < ϕ(n)
5. Calculate d = inverse(e) % ϕ(n)
6. Public Key {e,n}
7. Private Key {d,n}

**Encryption:** C = pow( M , e) % n

**Decryption:**  M = pow(C , d) % n

**Python script:**
```
from Crypto.Util.number import *

p = 881232631
q = 8210070537297879080403427081611143117323832705348733714367072296291847135452087039571565229808799967414518771375811008536462339613523174917807542832167807
n = 7234982060278593612743772588544839368196822773938312383630097619428475995024256036322651540252528422237410644498393424811350166970040550612292749721636427996110217
c = 3659175445595891578224956514800577143470123959736033284753586380604765644888785047353234225884268524868130423207412760208709937645278097199257596718082197770232653
e = 65537

# decrypt
d = inverse(e,(p-1)*(q-1))
m = pow(c,d,p*q)
print("Message: ", long_to_bytes(m))
```

The flag is ```nland{254_15_n07_50_84d}```